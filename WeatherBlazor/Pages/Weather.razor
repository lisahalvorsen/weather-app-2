@page "/weather"
@using System.Globalization
@using WeatherShared
@inject HttpClient Http
@inject IConfiguration Configuration
@namespace WeatherBlazor.Pages

<img id="logo" src="img/brislogo.png" alt="Bris logo" @onclick="GoToHomepage"/>


@if (string.IsNullOrEmpty(_selectedCity))
{
    <h3>Hvordan er v√¶ret i dag?</h3>
}
else
{
    <h3>Akkurat n√•</h3>
}

<div id="date">@GetFormattedDate()</div>

<div id="search-container">
    <input @bind="_city" placeholder="Se v√¶rmelding for Paris"/>
    <button @onclick="GetWeatherForecast">Se v√¶ret <img id="sun" src="img/sunicon.png" alt="Sun icon"/></button>
</div>

@if (_weatherData != null)
{
    <div id="weather-data-container">
        <div class="weather-card" title="Sted">üìç @CultureInfo.CurrentCulture.TextInfo.ToTitleCase(_selectedCity)</div>
        <div class="weather-card" title="Temperatur">üå°Ô∏è @Math.Round(_weatherData.Temperature, 1)¬∞C</div>
        <div class="weather-card" title="F√∏les som">F√∏les som @Math.Round(_weatherData.FeelsLike, 1)¬∞C</div>
        <div class="weather-card"
             title="V√¶rbeskrivelse">@CapitalizeFirstLetter(_weatherData.Description) @GetWeatherEmoji()</div>
        <div class="weather-card" title="Luftfuktighet">üíß @_weatherData.Humidity%</div>
        <div class="weather-card" title="Vindstyrke og retning">üí® @Math.Round(_weatherData.WindSpeed, 1) m/s
            (@GetWindDirection(_weatherData.WindDirection))
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div id="error-message">@_errorMessage</div>
}

@code {
    private string? _city;
    private string? _selectedCity;
    private WeatherData? _weatherData;
    private string? _errorMessage;
    private readonly DateTime _currentDate = DateTime.Now;

    private async Task GetWeatherForecast()
    {
        if (string.IsNullOrWhiteSpace(_city))
        {
            _errorMessage = "Du m√• skrive inn en by eller et sted!";
            return;
        }

        try
        {
            var baseUrl = Configuration["ApiBaseUrl"] ?? "https://localhost:7291";
            var apiUrl = $"{baseUrl}/api/weather/{_city}";

            var response = await Http.GetAsync(apiUrl);

            if (!response.IsSuccessStatusCode)
            {
                _errorMessage = "Finner ikke stedet ü§î";
                Console.WriteLine($"Feil fra API: {response.StatusCode}");
                return;
            }

            _weatherData = await response.Content.ReadFromJsonAsync<WeatherData>();
            _errorMessage = null;
            _selectedCity = _city;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Kunne ikke hente v√¶rmeldingen, pr√∏v igjen senere üòä";
            Console.WriteLine($"Noe gikk galt: {ex.Message}");
        }

        _city = "";
    }

    private string GetWeatherEmoji()
    {
        var emoji = _weatherData.Condition switch
        {
            WeatherCondition.Clear => "‚òÄÔ∏è",
            WeatherCondition.Clouds => "‚òÅÔ∏è",
            WeatherCondition.Rain => "üåßÔ∏è",
            WeatherCondition.Snow => "üå®Ô∏è",
            WeatherCondition.Sun => "‚òÄÔ∏è",
            WeatherCondition.Wind => "üí®",
            WeatherCondition.Other => "‚ùî",
            _ => ""
        };

        return emoji;
    }

    private string GetFormattedDate()
    {
        var culture = new CultureInfo("nb-NO");
        var formattedDate = _currentDate.ToString("dddd d. MMMM", culture);
        return char.ToUpper(formattedDate[0]) + formattedDate[1..];
    }

    private static string CapitalizeFirstLetter(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
        {
            return "";
        }

        return char.ToUpper(text[0]) + text[1..].ToLower();
    }

    private static string GetWindDirection(float degrees)
    {
        string[] directions = { "N", "N√ò", "√ò", "S√ò", "S", "SV", "V", "NV", "N" };
        return directions[(int)Math.Round(((double)degrees % 360) / 45)];
    }

    private void GoToHomepage()
    {
        _city = null;
        _selectedCity = null;
        _weatherData = null;
        _errorMessage = null;
    }

}